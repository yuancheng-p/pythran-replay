#!/usr/bin/env python
import os
import sys
import argparse
import re
import matplotlib.pyplot as plt
try:
    from collections import OrderedDict
except:
    from ordereddict import OrderedDict


def get_results(filepath):
    results = OrderedDict()
    f = file(filepath, "r")

    commit_pattern = "\[commit [0-9]+\][.]*"
    commit_id_pattern = "[0-9a-zA-Z]{40,40}"
    
    commits = []
    # read commits 
    for line in f:
        if re.match(commit_pattern, line):
            tmp_result = OrderedDict()
            commit = re.findall(commit_id_pattern, line)[0]
            commits.append(commit)
            results[commit] = tmp_result

    # read Compile time
    compile_pattern = ".*Compile time.*"
    time_pattern = "[0-9]+\.[0-9]+"
    f.seek(0)
    cnt = 0
    for line in f:
        if re.match(compile_pattern, line):
            compile_time = re.findall(time_pattern, line)[0]
            results[commits[cnt]]['compile_time'] = float(compile_time)
            cnt += 1

    # read Best time
    best_time_pattern = ".*Best time.*"
    f.seek(0)
    cnt = 0
    for line in f:
        if re.match(best_time_pattern, line):
            best_time = re.findall(time_pattern, line)[0]
            results[commits[cnt]]['best_time'] = float(best_time)
            cnt += 1

    f.close()
    return results


def plot_results(results, show=True, scale=None):
    """
    results is an OrderedDict
    x: commit_date
    y: best_time
    y2: compile_time
    """

    compile_times = []
    execute_times = []
    xcnts = []
    cnt = 0

    for commit, result in results.items():
        cnt += 1
        xcnts.append(cnt)
        execute_times.append(result['best_time'])
        compile_times.append(result['compile_time'])

    # TODO users may choose the scale of Y axis
    plt.title("Commits Performance History")
    #compile_ax configure
    plt.subplot(211)
    # TODO How to present only integer on x axis?
    plt.plot(xcnts, compile_times, '--r*')
    plt.ylabel("Compile time")
    plt.grid(True)
    up = max(compile_times) + 2
    down = min(compile_times) - 2
    plt.ylim([down, up])
    plt.xlim([0, xcnts[-1] + 1])

    # TODO How to share the same axis?
    #execute_ax configure
    plt.subplot(212)
    plt.plot(xcnts, execute_times, '--b*')
    plt.ylabel("Best execute time")
    plt.xlabel("Commit")
    plt.grid(True)
    up = max(execute_times) + 0.05
    down = min(execute_times) - 0.05
    plt.ylim([down, up])
    plt.xlim([0, xcnts[-1] + 1])

    if show:
        plt.show()



def parse_args():
    parser = argparse.ArgumentParser(description="Plot results")
    parser.add_argument("logfile")
    return parser.parse_args()


def main():
    options = parse_args()

    if not os.path.exists(options.logfile):
        print "%s doesn't exist!" % logfile 
        sys.exit()

    results = get_results(options.logfile)
    plot_results(results)


if __name__ == "__main__":
    main()

